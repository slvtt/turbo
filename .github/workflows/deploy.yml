name: Turbo Docker Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1. Установка зависимостей
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      # 2. Сборка всех приложений
      - name: Build with Turbo
        run: pnpm turbo run build

      # 3. Отдельная сборка Docker-образов
      - name: Build Docker Images
        run: |
          docker build -t web-app -f apps/web/Dockerfile .
          docker build -t docs-app -f apps/docs/Dockerfile .
          docker save web-app docs-app | gzip > apps.tar.gz

      # 4. Деплой
      - name: Deploy to Server
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # 1. Создаем SSH-ключ
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # 2. Добавляем хост в known_hosts
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

          # 3. Копируем файлы с проверкой
          scp -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key \
            apps.tar.gz \
            docker-compose.prod.yml \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/app/

          # 4. Запускаем на сервере
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd /app
            docker compose -f docker-compose.prod.yml down --remove-orphans
            docker load -i apps.tar.gz
            docker compose -f docker-compose.prod.yml up -d --force-recreate
          
            docker system prune -f --volumes
            rm apps.tar.gz
          EOF